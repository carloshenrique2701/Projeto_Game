import pygame as pg 
from main import *
from settings import *

_ = False 
#mapa do jogo - valores digitados como 1 representará paredes e valores booleanos falsos \
#serão espaços vazios para uma melhor percepção do mapa.
mini_map = [
                          #10                 20                  30              40              50     
	# 1,2,3,4,5,6,7,8,9|1,2,3,4,5,6,7,8,9|1,2,3,4,5,6,7,8,9|1,2,3,4,5,6,7,8,9|1,2,3,4,5,6,7,8,9|1,2,3,4,5,6
	[1,1,1,1,1,1,1,1,7,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #1
    [5,_,_,_,_,_,_,_,_,_,_,_,_,1,1,1,1,1,1,1,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,1,1,1,1,1,1,1,1,1,_,_,_,_,_,1], #2
    [1,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,1,_,_,_,_,_,_,1,_,_,_,1,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,1], #3
    [1,_,_,_,_,1,_,1,1,1,1,1,1,1,_,1,_,1,_,_,_,_,1,_,_,_,1,_,_,7,1,1,1,1,1,1,1,1,1,1,_,_,_,_,_,_,_,1,1,_,1], #4
    [1,_,1,1,_,1,_,_,_,_,_,_,_,_,_,1,_,1,_,_,_,_,1,_,_,_,1,_,_,1,_,_,_,_,_,_,_,_,_,_,1,_,1,_,1,_,_,1,1,_,1], #5
    [1,_,_,_,_,_,_,_,_,_,_,_,_,_,_,1,_,1,_,1,_,1,_,_,_,_,_,_,_,1,_,1,1,1,1,1,1,1,1,1,1,_,1,_,1,_,_,1,1,_,1], #6
    [1,_,_,_,_,_,_,1,1,1,1,1,1,1,_,_,_,_,_,1,_,1,_,1,1,1,1,1,_,_,_,1,_,_,_,_,_,_,_,_,1,_,1,_,1,_,_,_,_,_,1], #7
    [1,_,1,_,1,_,_,_,_,_,_,_,_,_,_,_,1,_,1,1,_,1,_,_,_,_,_,_,1,_,_,1,_,_,_,_,_,_,_,_,1,_,1,_,1,_,_,_,_,_,1], #8
    [1,_,1,_,1,_,_,_,_,_,_,_,1,1,1,_,_,_,1,_,_,_,_,_,_,1,_,_,1,_,_,_,_,_,_,_,_,_,_,_,1,_,1,_,1,_,_,_,_,1,1], #9
    [1,_,_,_,1,_,1,_,_,1,_,1,_,_,_,_,1,_,1,_,_,1,_,1,_,_,_,1,1,1,1,1,1,1,1,1,1,1,_,_,_,_,_,_,_,1,1,1,_,1,1], #10
    [1,_,1,_,1,_,1,_,_,1,_,1,_,_,_,_,_,_,_,_,_,1,_,1,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,1,1,1,_,_,_,_,_,_,_,1,1], #11
    [1,_,1,_,1,_,_,_,_,1,_,1,_,1,1,1,1,1,1,1,1,7,_,1,_,1,_,_,_,_,_,_,_,_,_,_,_,_,_,_,1,_,_,_,1,1,1,1,_,1,1], #12
    [5,_,1,_,_,_,_,_,_,1,_,1,_,_,_,1,_,_,_,_,_,1,_,1,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,1,1,1,_,_,_,_,_,_,_,1,1], #13
    [1,1,1,1,7,1,1,1,_,1,_,1,_,_,_,_,_,_,_,_,_,1,_,1,_,_,_,1,1,1,1,1,1,1,1,1,1,1,_,_,1,_,_,_,_,1,1,1,_,1,1], #14
    [1,1,1,1,1,1,1,1,_,_,_,_,_,_,_,1,_,_,_,_,_,1,_,1,_,1,_,_,_,_,_,_,_,_,_,_,_,_,_,1,1,1,_,_,_,_,_,_,_,_,5], #15
    [5,_,_,_,_,_,_,_,_,1,_,1,_,_,_,_,_,_,_,_,_,1,_,1,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,1,1,1,_,_,_,1], #16
    [1,_,_,_,_,_,_,_,_,1,_,1,_,1,1,1,1,1,1,1,1,1,_,1,_,_,_,1,1,1,1,1,1,1,1,1,1,1,_,_,_,_,_,_,1,1,1,_,_,_,7], #17
    [1,_,1,1,1,1,1,1,1,1,1,1,_,_,_,_,_,_,_,_,_,1,_,1,_,1,_,_,_,_,_,1,_,_,_,_,_,_,_,1,1,1,_,_,7,1,1,_,1,_,1], #18
    [1,_,_,_,_,_,_,_,_,1,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,1,1,1,_,1,_,1], #19
    [1,_,_,_,1,1,1,1,1,1,_,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,_,1,1,1,1,1,1,1,1,1,1,1,_,_,_,_,_,_,1,1,1,_,1,_,1], #20
    [1,_,_,_,_,_,_,_,_,_,_,_,_,_,1,_,_,_,_,_,_,_,_,_,1,_,_,_,1,1,1,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,1], #21
    [1,_,_,_,_,_,_,1,_,_,_,_,_,_,1,_,_,_,_,_,_,1,_,_,1,_,_,_,_,_,_,_,_,_,_,_,_,_,_,1,1,1,_,_,1,_,1,_,_,_,1], #22
    [1,_,_,_,1,_,_,1,_,_,_,_,_,_,1,_,_,_,_,_,_,1,_,_,1,_,1,1,1,_,_,1,1,1,_,_,1,1,1,_,_,_,_,_,1,_,1,_,_,_,1], #23
    [1,_,_,_,1,_,_,1,_,_,_,_,_,_,1,_,_,_,_,_,_,1,_,_,1,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,1], #24
    [1,_,_,_,1,_,_,1,_,_,_,_,_,_,_,_,_,_,_,_,_,1,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,1,1,1,1,1,1,1,1,1,1,1,_,1], #25
    [5,_,_,_,1,_,_,1,_,_,_,_,_,_,_,_,_,_,_,_,_,1,_,_,1,_,_,_,_,_,_,1,1,1,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,1], #26
    [1,_,_,_,1,_,_,_,_,1,_,_,_,_,1,_,_,_,1,_,_,_,_,_,1,_,1,1,1,_,_,_,_,_,_,_,_,_,_,1,_,_,_,_,_,_,_,_,_,_,1], #27
    [1,_,_,_,1,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,1,_,_,_,_,_,_,_,_,_,_,_,1,1,1,1,_,_,1,_,1,1,1,1,_,_,5], #28
    [1,_,_,_,1,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,1,_,_,1,1,1,_,1,1,1,_,_,_,_,_,1,_,_,_,_,_,_,_,_,_,_,1], #29
    [1,_,_,_,1,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,1,_,_,_,_,_,_,_,_,_,_,_,_,_,_,1,_,_,1,_,1,_,_,_,_,_,1], #30
    [1,_,_,_,1,_,_,1,_,1,_,_,1,_,1,_,1,_,1,_,1,_,_,_,_,_,_,_,1,1,1,1,1,1,1,1,1,1,1,5,_,_,_,_,_,_,_,_,_,_,1], #31
    [1,_,_,_,1,_,_,1,_,1,_,_,1,_,1,_,1,_,1,_,1,_,1,1,1,_,_,_,_,_,_,_,_,_,_,_,_,1,1,1,1,1,1,1,1,1,1,1,_,_,1], #32
    [1,_,_,_,_,_,_,1,_,1,_,_,1,_,1,_,1,_,1,_,1,_,_,_,_,_,_,1,_,_,_,_,_,_,_,_,_,_,_,1,_,_,_,_,_,_,_,_,_,_,1], #33
    [1,_,_,_,_,_,_,1,_,1,_,_,1,_,1,_,1,_,1,_,1,_,_,_,_,1,_,1,_,1,1,1,1,1,1,1,1,1,_,1,_,1,1,1,1,1,_,_,_,_,1], #34
    [1,_,1,1,1,1,1,1,_,1,_,_,1,_,1,_,1,_,1,_,1,_,_,_,_,1,_,1,_,_,_,_,_,_,_,_,_,1,_,1,_,_,_,_,_,_,_,_,_,_,1], #35
    [1,_,_,_,_,_,_,5,_,1,_,_,1,_,1,_,1,_,1,_,1,_,_,1,_,1,_,1,_,_,1,_,_,_,_,_,_,1,_,1,_,1,1,1,1,1,1,_,_,_,1], #36
    [1,_,_,1,1,1,1,1,1,1,_,_,1,_,1,_,1,_,1,_,1,_,_,1,_,1,_,1,_,1,1,1,1,1,1,1,1,5,_,_,_,_,_,_,_,_,1,_,_,_,1], #37
    [1,_,_,_,_,_,_,1,_,1,_,_,1,_,1,_,1,_,1,_,1,_,_,1,_,1,_,1,_,_,1,_,_,_,_,_,_,1,_,_,1,_,_,_,_,_,1,_,_,_,1], #38
    [1,_,_,_,_,_,_,1,_,1,_,_,1,_,1,_,1,_,1,_,1,_,_,1,_,1,_,_,_,_,1,_,_,_,_,_,_,1,_,_,1,1,_,_,1,_,1,_,_,1,1], #39
    [1,_,1,1,1,1,1,1,_,1,1,_,1,_,1,_,1,_,1,_,1,1,1,1,1,1,1,1,1,1,1,1,1,_,_,_,_,1,_,_,1,1,_,_,1,_,1,1,_,_,1], #40
    [1,_,_,_,_,_,_,1,_,1,1,_,1,_,1,_,1,_,1,_,1,_,_,1,_,_,_,_,_,_,1,_,_,_,_,_,_,1,_,_,1,1,_,_,1,_,_,1,_,1,1], #41
    [1,_,_,_,_,_,_,_,_,_,1,_,1,1,1,_,1,_,7,1,1,_,_,_,_,_,_,_,_,_,_,_,_,1,_,_,_,1,_,_,1,1,_,_,1,_,_,1,_,_,1], #42
    [1,_,1,1,1,1,1,1,_,_,1,_,1,_,_,_,1,_,_,_,_,1,1,1,1,_,1,1,1,1,1,1,1,7,_,_,_,1,_,_,_,1,_,_,1,_,_,1,_,_,1], #43
    [1,_,_,_,_,_,_,_,_,_,1,_,1,_,_,_,1,_,_,_,_,_,1,_,_,_,_,_,_,_,_,_,_,1,_,_,_,_,_,1,_,1,_,_,1,_,_,6,1,_,1], #44
    [1,_,1,1,1,1,1,1,_,_,1,_,1,_,_,_,1,_,_,_,_,_,1,_,_,1,_,1,1,1,1,_,_,1,_,_,_,_,_,1,_,1,_,_,1,_,_,_,1,_,1], #45
    [1,_,_,_,_,_,1,_,_,_,1,_,1,1,_,1,1,1,_,1,1,1,1,_,_,_,_,_,_,_,_,_,_,1,_,_,1,_,_,1,_,1,_,_,1,_,1,_,1,_,1], #46
    [1,_,_,_,1,1,1,1,_,1,1,1,1,1,_,1,1,_,_,_,_,_,1,_,1,1,1,1,1,1,1,1,1,1,1,1,1,_,_,1,_,1,_,_,1,_,_,_,1,_,1], #47
    [1,_,_,_,_,_,1,_,_,_,1,_,1,_,_,1,1,_,1,1,_,_,1,_,_,_,_,_,_,_,_,_,_,_,_,_,1,_,_,1,_,1,_,_,1,_,1,_,1,_,1], #48
    [1,_,_,_,_,_,1,_,_,_,1,_,1,_,1,1,1,_,_,_,_,_,1,_,1,1,1,1,1,1,1,1,1,1,1,1,7,_,_,1,1,1,1,1,6,1,1,_,1,_,1], #49
    [1,_,1,1,1,1,1,1,_,_,1,_,1,_,_,_,1,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,1,_,_,_,_,_,_,_,_,_,_,_,6,1,1], #50
    [5,_,_,_,_,_,1,_,_,_,_,_,_,_,_,1,1,5,1,7,1,1,_,_,_,1,1,1,5,1,1,1,_,_,_,_,1,7,1,1,1,1,1,1,1,1,1,_,_,_,9], #51
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1], #52
]  # 1,2,3,4,5,6,7,8,9|1,2,3,4,5,6,7,8,9|1,2,3,4,5,6,7,8,9|1,2,3,4,5,6,7,8,9|1,2,3,4,5,6,7,8,9|1,2,3,4,5,6
                          #10                 20                  30              40              50     

class Map:

	def __init__(self, game):
		self.game = game 
		self.mini_map = mini_map
		self.world_map = {}
		self.rows = len(self.mini_map)
		self.cols = len(self.mini_map[0])
		self.get_map()


	def get_map(self):
		"""
		j é o índice da linha (coordenada y) da lista 2D mini_map.
		row é a linha inteira (uma lista de valores) no índice j da mini_map.
		i é o índice da coluna (coordenada x) da lista row.
		value é o valor individual na posição (i, j) da lista 2D mini_map.
		"""
		for j, row in enumerate(self.mini_map): 
			for i, value in enumerate(row): 
				if value:
					self.world_map[(i, j)] = value #diciona a chave (i, j) na lista world_map


	def draw(self):
		[pg.draw.rect(self.game.screen, 'darkgray', (pos[0] * 100, pos[1] * 100\
			, 100, 100), 2)
		for pos in self.world_map] #cria um retângulo em cada posição da lista world_map


		